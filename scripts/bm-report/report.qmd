---
title: "Velox Build Metrics"
execute:
  echo: false
  warning: false
format:
  html:
    grid:
        sidebar-width: 0px
        body-width: 1800px
        margin-width: 150px
        gutter-width: 1.5rem
    self-contained: true
    page-layout: full
    toc: false
    margin-left: 30px
    link-external-newwindow: true
    theme: cosmo
---




```{r setup}
library(gt)
library(ggplot2)
library(plotly)
library(gdata)
library(dplyr)
library(purrr)

cd <- cachem::cache_disk(rappdirs::user_cache_dir("velox-bm-report"))
mgh <- memoise::memoise(gh::gh, cache = cd)
mruns <- memoise::memoise(conbenchcoms::runs, cache = cd)
mresults <- memoise::memoise(conbenchcoms::benchmark_results, cache = cd)

runs <- mgh(
  "GET /repos/facebookincubator/velox/actions/workflows/build-metrics.yml/runs",
  status = "success",
  branch = "main"
) |> jsonlite::toJSON()

newest_sha <- runs |>
  jqr::jq(".workflow_runs | max_by(.updated_at) | .head_sha") |>
  jsonlite::fromJSON()

run_shas <- runs |>
  jqr::jq("[.workflow_runs[].head_sha]") |>
  jsonlite::fromJSON()
run_ids <- mruns(run_shas) |>
  filter(commit.branch == "facebookincubator:main", substr(id, 1, 2) == "BM") |>
  pull(id)
results <- run_ids |>
  purrr::map_df(mresults) |>
  mutate(
    timestamp = lubridate::as_datetime(timestamp),
    stats.data = unlist(stats.data),
    type = case_when(
      startsWith(run_id, "BM-debug") ~ "debug",
      .default = "release"
    )
  )
```

```{r ggplot2-specs}
theme_set(theme_minimal(base_size = 12) %+replace%
  theme(
    plot.title.position = "plot",
    strip.text = element_text(size = 12)
  ))

format_tags <- function(x) {
  x |>
    stringr::str_replace_all("_", " ") |>
    stringr::str_to_title()
}
```

::::: {.panel-tabset}

## Times
```{r total-graphs}
times_plot <- results |>
  filter(tags.suite == "total", endsWith(tags.source, "time")) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = format_tags(tags.name)
  ) |>
  ggplot(aes(
    x = timestamp,
    y = stats.data,
    group = interaction(tags.name, type), color = tags.name
  )) +
  facet_wrap(~type) +
  geom_line() +
  geom_point() +
  scale_y_time() +
  scale_x_datetime() +
  labs(
    title = "Velox Build Times",
    x = "Date",
    y = "Time in Minutes"
  ) +
  scale_color_viridis_d()
ggplotly(times_plot) |>
  layout(legend = list(title = list(text = "Tags Name<br>"))) ## needed because theme legend specs don't work with ggplotly
```

```{r expensive-objects-compile}
compile_times <- results |>
  filter(tags.suite == "compiling", commit.sha == newest_sha) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = glue::glue("`{tags.name}`")
  )
```

### Compile Times

:::: {.columns}

::: {.column width="49%"}

```{r compile-times-release}
compile_times |>
  filter(type == "release") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Time"
  ) |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Release") |>
  fmt_markdown(columns = "tags.name") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::: {.column width="2%"}

:::

::: {.column width="49%"}

```{r compile-times-debug}
compile_times |>
  filter(type == "debug") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Time"
  ) |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Debug") |>
  fmt_markdown(columns = "tags.name") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::::

```{r expensive-objects-link}
link_times <- results |>
  filter(tags.suite == "linking", commit.sha == newest_sha) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = glue::glue("`{tags.name}`")
  )

```

### Link Times

:::: {.columns}

::: {.column width="49%"}

```{r link-times-release}
link_times |>
  filter(type == "release") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Time"
  ) |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Release") |>
  fmt_markdown(columns = "tags.name") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::: {.column width="2%"}

:::

::: {.column width="49%"}

```{r link-times-debug}
link_times |>
  filter(type == "debug") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Time"
  ) |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Link Times - Debug") |>
  fmt_markdown(columns = "tags.name") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::::


## Sizes
```{r big-objects}
size_formatter <- function(x) {
  function(x) {
    gdata::humanReadable(x, standard = "Unix")
  }
}
create_byte <- function(bytes) {
  stopifnot(is.numeric(bytes))
  structure(
    list(bytes = bytes),
    class = "BytesObject"
  )
}
Bytes <- Vectorize(create_byte, SIMPLIFY = FALSE)

print.BytesObject <- function(x, ...) {
  human_readable <- prettyunits::pretty_bytes(x$bytes)
  cat(human_readable)
}

object_sizes <- results |>
  filter(endsWith(tags.source, "size"), commit.sha == newest_sha)  |>
  mutate(
    tags.name = glue::glue("`{tags.name}`")
  )
sizes_plot <- results |>
  filter(tags.suite == "executable", startsWith(tags.name, "total_")) |>
  ggplot(aes(
    x = timestamp,
    y = stats.data,
    group = interaction(tags.name, type), color = tags.name
  )) +
  facet_wrap(~type) +
  geom_line() +
  geom_point() +
  # scale_y_continuous(labels = size_formatter()) +
  scale_x_datetime() +
  labs(
    title = "Velox Object Sizes",
    x = "Date",
    y = "Size"
  ) +
  scale_color_viridis_d()
ggplotly(sizes_plot) |>
  layout(legend = list(title = list(text = "Tags Name<br>"))) ## needed because theme legend specs don't work with ggplotly
```

### Object Sizes 
:::: {.columns}

::: {.column width="49%"}

```{r object-sizes-release}
object_sizes |>
  filter(type == "release") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Size"
  ) |>
  fmt(columns = `stats.data`, fn = size_formatter()) |>
  fmt_markdown(columns = "tags.name") |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Release") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::: {.column width="2%"}

:::

::: {.column width="49%"}

```{r object-sizes-debug}
object_sizes |>
  filter(type == "debug") |>
  select(tags.name, stats.data) |>
  arrange(desc(stats.data)) |>
  gt() |>
  fmt(columns = `stats.data`, fn = size_formatter()) |>
  fmt_markdown(columns = "tags.name") |>
  cols_label(
    `tags.name` = "Object",
    `stats.data` = "Time"
  ) |>
  cols_align(align = "left", columns = everything()) |>
  tab_header(title = "Debug") |>
  opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
```

:::

::::

:::::
