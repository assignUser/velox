# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Scheduled Fuzzer Jobs"

on:
  pull_request:
    paths:
      - ".github/workflows/scheduled.yml"

  schedule:
    - cron: '0 3 * * *'

  workflow_dispatch:
    ref:
      description: 'Ref to checkout out'
      default: 'main'
    numThreads:
      description: 'Number of threads'
      default: 16
    maxHighMemJobs:
      description: 'Number of high memory jobs'
      default: 8
    maxLinkJobs:
      description: 'Maximum number of link jobs'
      default: 4
    extraCMakeFlags:
      description: 'Additional CMake flags'
      default: ''

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  compile:
    runs-on: 8-core
    timeout: 120
    env:
      CCACHE_DIR: "${{ github.workspace }}/.ccache/"
      CCACHE_BASEDIR: "${{ github.workspace }}"
      LINUX_DISTRO: "ubuntu"
    steps:
      - name: "Install mold as default linker"
        uses: rui314/setup-mold@v1

      - name: "Restore ccache"
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: "${{ env.CCACHE_DIR }}"
          # We are using the benchmark ccache as it has all 
          # required features enabled, so no need to create a new one
          key: ccache-benchmark-${{ github.sha }}
          restore-keys: |
            ccache-benchmark-

      - name: "Checkout Repo"
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: "${{ inputs.ref || 'main' }}"

      - name: "Install dependencies"
        run: source ./scripts/setup-ubuntu.sh

      - name: "Build"
        run: |
          make debug NUM_THREADS="${{ inputs.numThreads || 8 }}" MAX_HIGH_MEM_JOBS="${{ inputs.maxHighMemJobs || 8 }}" MAX_LINK_JOBS="${{ inputs.maxLinkJobs || 4 }}" EXTRA_CMAKE_FLAGS="-DVELOX_ENABLE_ARROW=ON ${{ inputs.extraCMakeFlags }}"
          ccache -s

      - name: Upload presto fuzzer 
        uses: actions/upload-artifact@v3
        with:
          name: presto
          path: _build/debug/velox/expression/tests/velox_expression_fuzzer_test
            
      - name: Upload spark fuzzer 
        uses: actions/upload-artifact@v3
        with:
          name: spark
          path: |
            _build/debug/velox/expression/tests/spark_expression_fuzzer_test
            _build/debug/velox/expression/tests/spark_aggregation_fuzzer_test

      - name: Upload aggregation fuzzer 
        uses: actions/upload-artifact@v3
        with:
          name: aggregation
          path: _build/debug/velox/exec/tests/velox_aggregation_fuzzer_test

      - name: Upload join fuzzer 
        uses: actions/upload-artifact@v3
        with:
          name: join
          path: _build/debug/velox/exec/tests/velox_join_fuzzer_test      

  linux-presto-fuzzer-run:
    runs-on: 8-core
    timeout-minutes: 120
    steps:

      - name: Download presto fuzzer 
        uses: actions/download-artifact@v3
        with:
          name: presto
          
      - name: "Run Presto Fuzzer"
        run: |
          mkdir -p /tmp/fuzzer_repro/
          chmod -R 777 /tmp/fuzzer_repro
          ./velox_expression_fuzzer_test \
                --seed ${RANDOM} \
                --enable_variadic_signatures \
                --velox_fuzzer_enable_complex_types \
                --lazy_vector_generation_ratio 0.2 \
                --velox_fuzzer_enable_column_reuse \
                --velox_fuzzer_enable_expression_reuse \
                --max_expression_trees_per_step 2 \
                --retry_with_try \
                --enable_dereference \
                --duration_sec 3600 \
                --logtostderr=1 \
                --minloglevel=0 \
                --repro_persist_path=/tmp/fuzzer_repro \
          && echo -e "\n\nFuzzer run finished successfully."

      - name: Archive production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: presto-fuzzer-failure-artifacts
          path: |
            /tmp/fuzzer_repro

  linux-spark-fuzzer-run:
    runs-on: 8-core
    timeout-minutes: 120
    steps:

      - name: Download spark fuzzer 
        uses: actions/download-artifact@v3
        with:
          name: spark

      - name: "Run Spark Fuzzer"
        run: |
          mkdir -p /tmp/spark_fuzzer_repro/
            chmod -R 777 /tmp/spark_fuzzer_repro
            ./spark_expression_fuzzer_test \
                --seed ${RANDOM} \
                --enable_variadic_signatures \
                --lazy_vector_generation_ratio 0.2 \
                --velox_fuzzer_enable_column_reuse \
                --velox_fuzzer_enable_expression_reuse \
                --max_expression_trees_per_step 2 \
                --retry_with_try \
                --duration_sec 1800 \
                --logtostderr=1 \
                --minloglevel=0 \
                --repro_persist_path=/tmp/spark_fuzzer_repro \
            && echo -e "\n\nSpark Fuzzer run finished successfully."

      - name: Archive Spark production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: spark-fuzzer-failure-artifacts
          path: |
            /tmp/spark_fuzzer_repro

      - name: "Run Spark Aggregate Fuzzer"
        run: |
          mkdir -p /tmp/spark_aggregate_fuzzer_repro/
          chmod -R 777 /tmp/spark_aggregate_fuzzer_repro
          ./spark_aggregation_fuzzer_test \
                --seed ${RANDOM} \
                --duration_sec 1800 \
                --logtostderr=1 \
                --minloglevel=0 \
                --repro_persist_path=/tmp/spark_aggregate_fuzzer_repro \
          && echo -e "\n\nSpark Aggregation Fuzzer run finished successfully."

      - name: Archive Spark aggregate production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: spark-agg-fuzzer-failure-artifacts
          path: |
            /tmp/spark_aggregate_fuzzer_repro


  linux-aggregate-fuzzer-run:
    runs-on: 8-core
    timeout-minutes: 120
    steps:

      - name: Download aggregation fuzzer 
        uses: actions/download-artifact@v3
        with:
          name: aggregation

      - name: "Run Aggregate Fuzzer"
        run: |
          mkdir -p /tmp/aggregate_fuzzer_repro/
            rm -rfv /tmp/aggregate_fuzzer_repro/*
            chmod -R 777 /tmp/aggregate_fuzzer_repro
            _build/debug/velox/exec/tests/velox_aggregation_fuzzer_test \
                --seed ${RANDOM} \
                --duration_sec 1800 \
                --logtostderr=1 \
                --minloglevel=0 \
                --repro_persist_path=/tmp/aggregate_fuzzer_repro \
            && echo -e "\n\nAggregation fuzzer run finished successfully."

      - name: Archive aggregate production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: aggregate-fuzzer-failure-artifacts
          path: |
            /tmp/aggregate_fuzzer_repro

  linux-join-fuzzer-run:
    runs-on: 8-core
    timeout-minutes: 120
    steps:

      - name: Download join fuzzer 
        uses: actions/download-artifact@v3
        with:
          name: join

      - name: "Run Aggregate Fuzzer"
        run: |
          mkdir -p /tmp/join_fuzzer_repro/
          rm -rfv /tmp/join_fuzzer_repro/*
          chmod -R 777 /tmp/join_fuzzer_repro
          ./velox_join_fuzzer_test \
                --seed ${RANDOM} \
                --duration_sec 1800 \
                --logtostderr=1 \
                --minloglevel=0 \
            && echo -e "\n\nAggregation fuzzer run finished successfully."

      - name: Archive aggregate production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: join-fuzzer-failure-artifacts
          path: |
            /tmp/join_fuzzer_repro
